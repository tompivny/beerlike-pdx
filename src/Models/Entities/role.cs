#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



/// <summary>
/// Grouping of security privileges. Users are assigned roles that authorize their access to the Microsoft CRM system.
/// </summary>
[System.Runtime.Serialization.DataContractAttribute()]
[Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("role")]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Dataverse Model Builder", "2.0.0.11")]
public partial class Role : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
{
	
	/// <summary>
	/// Default Constructor.
	/// </summary>
	public Role() : 
			base(EntityLogicalName)
	{
	}
	
	public const string EntityLogicalName = "role";
	
	public const string EntityLogicalCollectionName = "roles";
	
	public const string EntitySetName = "roles";
	
	public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
	
	public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
	
	private void OnPropertyChanged(string propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void OnPropertyChanging(string propertyName)
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
		}
	}
	
	/// <summary>
	/// Application Id of user who created the role
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("applicationid")]
	public System.Nullable<System.Guid> ApplicationId
	{
		get
		{
			return this.GetAttributeValue<System.Nullable<System.Guid>>("applicationid");
		}
	}
	
	/// <summary>
	/// Personas/Licenses the security role applies to
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("appliesto")]
	public string AppliesTo
	{
		get
		{
			return this.GetAttributeValue<string>("appliesto");
		}
		set
		{
			this.OnPropertyChanging("AppliesTo");
			this.SetAttributeValue("appliesto", value);
			this.OnPropertyChanged("AppliesTo");
		}
	}
	
	/// <summary>
	/// Unique identifier of the business unit with which the role is associated.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("businessunitid")]
	public Microsoft.Xrm.Sdk.EntityReference BusinessUnitId
	{
		get
		{
			return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("businessunitid");
		}
		set
		{
			this.OnPropertyChanging("BusinessUnitId");
			this.SetAttributeValue("businessunitid", value);
			this.OnPropertyChanged("BusinessUnitId");
		}
	}
	
	/// <summary>
	/// Tells whether the role can be deleted.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("canbedeleted")]
	public Microsoft.Xrm.Sdk.BooleanManagedProperty CanBeDeleted
	{
		get
		{
			return this.GetAttributeValue<Microsoft.Xrm.Sdk.BooleanManagedProperty>("canbedeleted");
		}
		set
		{
			this.OnPropertyChanging("CanBeDeleted");
			this.SetAttributeValue("canbedeleted", value);
			this.OnPropertyChanged("CanBeDeleted");
		}
	}
	
	/// <summary>
	/// For internal use only.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("componentstate")]
	public virtual componentstate? ComponentState
	{
		get
		{
			return ((componentstate?)(EntityOptionSetEnum.GetEnum(this, "componentstate")));
		}
	}
	
	/// <summary>
	/// Unique identifier of the user who created the role.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdby")]
	public Microsoft.Xrm.Sdk.EntityReference CreatedBy
	{
		get
		{
			return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdby");
		}
	}
	
	/// <summary>
	/// Date and time when the role was created.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdon")]
	public System.Nullable<System.DateTime> CreatedOn
	{
		get
		{
			return this.GetAttributeValue<System.Nullable<System.DateTime>>("createdon");
		}
	}
	
	/// <summary>
	/// Unique identifier of the delegate user who created the role.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfby")]
	public Microsoft.Xrm.Sdk.EntityReference CreatedOnBehalfBy
	{
		get
		{
			return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdonbehalfby");
		}
	}
	
	/// <summary>
	/// Description of the security role
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("description")]
	public string Description
	{
		get
		{
			return this.GetAttributeValue<string>("description");
		}
		set
		{
			this.OnPropertyChanging("Description");
			this.SetAttributeValue("description", value);
			this.OnPropertyChanged("Description");
		}
	}
	
	/// <summary>
	/// Unique identifier of the data import or data migration that created this record.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("importsequencenumber")]
	public System.Nullable<int> ImportSequenceNumber
	{
		get
		{
			return this.GetAttributeValue<System.Nullable<int>>("importsequencenumber");
		}
		set
		{
			this.OnPropertyChanging("ImportSequenceNumber");
			this.SetAttributeValue("importsequencenumber", value);
			this.OnPropertyChanged("ImportSequenceNumber");
		}
	}
	
	/// <summary>
	/// Value indicating whether security role is auto-assigned based on user license
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isautoassigned")]
	public virtual securityrole_isautoassigned? IsAutoAssigned
	{
		get
		{
			return ((securityrole_isautoassigned?)(EntityOptionSetEnum.GetEnum(this, "isautoassigned")));
		}
		set
		{
			this.OnPropertyChanging("IsAutoAssigned");
			this.SetAttributeValue("isautoassigned", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			this.OnPropertyChanged("IsAutoAssigned");
		}
	}
	
	/// <summary>
	/// Information that specifies whether this component can be customized.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("iscustomizable")]
	public Microsoft.Xrm.Sdk.BooleanManagedProperty IsCustomizable
	{
		get
		{
			return this.GetAttributeValue<Microsoft.Xrm.Sdk.BooleanManagedProperty>("iscustomizable");
		}
		set
		{
			this.OnPropertyChanging("IsCustomizable");
			this.SetAttributeValue("iscustomizable", value);
			this.OnPropertyChanged("IsCustomizable");
		}
	}
	
	/// <summary>
	/// Role is inherited by users from team membership, if role associated with team.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isinherited")]
	public virtual isinherited? IsInherited
	{
		get
		{
			return ((isinherited?)(EntityOptionSetEnum.GetEnum(this, "isinherited")));
		}
		set
		{
			this.OnPropertyChanging("IsInherited");
			this.SetAttributeValue("isinherited", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			this.OnPropertyChanged("IsInherited");
		}
	}
	
	/// <summary>
	/// Indicates whether the solution component is part of a managed solution.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ismanaged")]
	public System.Nullable<bool> IsManaged
	{
		get
		{
			return this.GetAttributeValue<System.Nullable<bool>>("ismanaged");
		}
	}
	
	/// <summary>
	/// Is this role generated by the system
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("issytemgenerated")]
	public System.Nullable<bool> IsSystemGenerated
	{
		get
		{
			return this.GetAttributeValue<System.Nullable<bool>>("issytemgenerated");
		}
	}
	
	/// <summary>
	/// Unique identifier of the user who last modified the role.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedby")]
	public Microsoft.Xrm.Sdk.EntityReference ModifiedBy
	{
		get
		{
			return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedby");
		}
	}
	
	/// <summary>
	/// Date and time when the role was last modified.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedon")]
	public System.Nullable<System.DateTime> ModifiedOn
	{
		get
		{
			return this.GetAttributeValue<System.Nullable<System.DateTime>>("modifiedon");
		}
	}
	
	/// <summary>
	/// Unique identifier of the delegate user who last modified the role.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfby")]
	public Microsoft.Xrm.Sdk.EntityReference ModifiedOnBehalfBy
	{
		get
		{
			return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedonbehalfby");
		}
	}
	
	/// <summary>
	/// Name of the role.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("name")]
	public string Name
	{
		get
		{
			return this.GetAttributeValue<string>("name");
		}
		set
		{
			this.OnPropertyChanging("Name");
			this.SetAttributeValue("name", value);
			this.OnPropertyChanged("Name");
		}
	}
	
	/// <summary>
	/// Unique identifier of the organization associated with the role.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("organizationid")]
	public System.Nullable<System.Guid> OrganizationId
	{
		get
		{
			return this.GetAttributeValue<System.Nullable<System.Guid>>("organizationid");
		}
	}
	
	/// <summary>
	/// Date and time that the record was migrated.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("overriddencreatedon")]
	public System.Nullable<System.DateTime> OverriddenCreatedOn
	{
		get
		{
			return this.GetAttributeValue<System.Nullable<System.DateTime>>("overriddencreatedon");
		}
		set
		{
			this.OnPropertyChanging("OverriddenCreatedOn");
			this.SetAttributeValue("overriddencreatedon", value);
			this.OnPropertyChanged("OverriddenCreatedOn");
		}
	}
	
	/// <summary>
	/// For internal use only.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("overwritetime")]
	public System.Nullable<System.DateTime> OverwriteTime
	{
		get
		{
			return this.GetAttributeValue<System.Nullable<System.DateTime>>("overwritetime");
		}
	}
	
	/// <summary>
	/// Unique identifier of the parent role.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("parentroleid")]
	public Microsoft.Xrm.Sdk.EntityReference ParentRoleId
	{
		get
		{
			return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("parentroleid");
		}
	}
	
	/// <summary>
	/// Unique identifier of the parent root role.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("parentrootroleid")]
	public Microsoft.Xrm.Sdk.EntityReference ParentRootRoleId
	{
		get
		{
			return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("parentrootroleid");
		}
	}
	
	/// <summary>
	/// Unique identifier of the role.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("roleid")]
	public System.Nullable<System.Guid> RoleId
	{
		get
		{
			return this.GetAttributeValue<System.Nullable<System.Guid>>("roleid");
		}
		set
		{
			this.OnPropertyChanging("RoleId");
			this.SetAttributeValue("roleid", value);
			if (value.HasValue)
			{
				base.Id = value.Value;
			}
			else
			{
				base.Id = System.Guid.Empty;
			}
			this.OnPropertyChanged("RoleId");
		}
	}
	
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("roleid")]
	public override System.Guid Id
	{
		get
		{
			return base.Id;
		}
		set
		{
			this.RoleId = value;
		}
	}
	
	/// <summary>
	/// For internal use only.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("roleidunique")]
	public System.Nullable<System.Guid> RoleIdUnique
	{
		get
		{
			return this.GetAttributeValue<System.Nullable<System.Guid>>("roleidunique");
		}
	}
	
	/// <summary>
	/// Unique identifier of the role template that is associated with the role.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("roletemplateid")]
	public Microsoft.Xrm.Sdk.EntityReference RoleTemplateId
	{
		get
		{
			return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("roletemplateid");
		}
	}
	
	/// <summary>
	/// Unique identifier of the associated solution.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("solutionid")]
	public System.Nullable<System.Guid> SolutionId
	{
		get
		{
			return this.GetAttributeValue<System.Nullable<System.Guid>>("solutionid");
		}
	}
	
	/// <summary>
	/// Summary of Core Table Permissions of the Role
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("summaryofcoretablepermissions")]
	public string SummaryofCoreTablePermissions
	{
		get
		{
			return this.GetAttributeValue<string>("summaryofcoretablepermissions");
		}
		set
		{
			this.OnPropertyChanging("SummaryofCoreTablePermissions");
			this.SetAttributeValue("summaryofcoretablepermissions", value);
			this.OnPropertyChanged("SummaryofCoreTablePermissions");
		}
	}
	
	/// <summary>
	/// Version number of the role.
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("versionnumber")]
	public System.Nullable<long> VersionNumber
	{
		get
		{
			return this.GetAttributeValue<System.Nullable<long>>("versionnumber");
		}
	}
	
	/// <summary>
	/// 1:N role_parent_role
	/// </summary>
	[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("role_parent_role", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
	public System.Collections.Generic.IEnumerable<Role> Referencedrole_parent_role
	{
		get
		{
			return this.GetRelatedEntities<Role>("role_parent_role", Microsoft.Xrm.Sdk.EntityRole.Referenced);
		}
		set
		{
			this.OnPropertyChanging("Referencedrole_parent_role");
			this.SetRelatedEntities<Role>("role_parent_role", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
			this.OnPropertyChanged("Referencedrole_parent_role");
		}
	}
	
	/// <summary>
	/// 1:N role_parent_root_role
	/// </summary>
	[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("role_parent_root_role", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
	public System.Collections.Generic.IEnumerable<Role> Referencedrole_parent_root_role
	{
		get
		{
			return this.GetRelatedEntities<Role>("role_parent_root_role", Microsoft.Xrm.Sdk.EntityRole.Referenced);
		}
		set
		{
			this.OnPropertyChanging("Referencedrole_parent_root_role");
			this.SetRelatedEntities<Role>("role_parent_root_role", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
			this.OnPropertyChanged("Referencedrole_parent_root_role");
		}
	}
	
	/// <summary>
	/// N:N teamroles_association
	/// </summary>
	[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("teamroles_association")]
	public System.Collections.Generic.IEnumerable<Team> teamroles_association
	{
		get
		{
			return this.GetRelatedEntities<Team>("teamroles_association", null);
		}
		set
		{
			this.OnPropertyChanging("teamroles_association");
			this.SetRelatedEntities<Team>("teamroles_association", null, value);
			this.OnPropertyChanged("teamroles_association");
		}
	}
	
	/// <summary>
	/// N:1 role_parent_role
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("parentroleid")]
	[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("role_parent_role", Microsoft.Xrm.Sdk.EntityRole.Referencing)]
	public Role Referencingrole_parent_role
	{
		get
		{
			return this.GetRelatedEntity<Role>("role_parent_role", Microsoft.Xrm.Sdk.EntityRole.Referencing);
		}
	}
	
	/// <summary>
	/// N:1 role_parent_root_role
	/// </summary>
	[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("parentrootroleid")]
	[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("role_parent_root_role", Microsoft.Xrm.Sdk.EntityRole.Referencing)]
	public Role Referencingrole_parent_root_role
	{
		get
		{
			return this.GetRelatedEntity<Role>("role_parent_root_role", Microsoft.Xrm.Sdk.EntityRole.Referencing);
		}
	}
}
#pragma warning restore CS1591
